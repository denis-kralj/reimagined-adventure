@inject NavigationManager NavigationManager
@inject HttpClient httpClient
@inject IJSRuntime jSRuntime

@implements IAsyncDisposable

<div class="message-list">
    <ul id="messagesList">
        @foreach (ChatMessage message in chatMessages)
        {
            <ChatMessageElement Message="@message" />
        }
    </ul>
</div>
@code {
    private HubConnection hubConnection;
    private IList<ChatMessage> chatMessages = new List<ChatMessage>();

    protected override async Task OnInitializedAsync()
    {
        await InitializeSignalRHub();
        await PopulateExistingMessages();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        await ScrollToBottom();
    }

    private async Task ScrollToBottom()
    {
        await jSRuntime.InvokeVoidAsync("scrollMessages");
    }

    private async Task PopulateExistingMessages()
    {
        var allMessages = await httpClient.GetFromJsonAsync<ChatMessage[]>("Message");
        chatMessages = allMessages.ToList();
    }

    private async Task InitializeSignalRHub()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri(UriSegments.ChatHub))
            .Build();

        hubConnection.On<ChatMessage>("MessagesUpdated", HandleMessage);

        await hubConnection.StartAsync();
    }

    private void HandleMessage(ChatMessage message)
    {
        chatMessages.Add(message);
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}