@using System.Linq

@inject NavigationManager NavigationManager
@inject HttpClient httpClient
@implements IAsyncDisposable

<div class="message-list">
<ul id="messagesList">
    @foreach (ChatMessage message in chatMessages)
    {
        <li><strong>@message.User.Handle</strong>:<span>@message.Message</span></li>
    }
</ul>
</div>
@code {
    private HubConnection hubConnection;
    private IList<ChatMessage> chatMessages = new List<ChatMessage>();

    protected override async Task OnInitializedAsync()
    {
        await InitializeSignalRHub();
        await PopulateExistingMessages();
    }

    private async Task PopulateExistingMessages()
    {
        var allMessages = await httpClient.GetFromJsonAsync<ChatMessage[]>("Message");
        chatMessages = allMessages.ToList();
    }

    private async Task InitializeSignalRHub()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<IList<ChatMessage>>("MessagesUpdated", (messages) => { 
            chatMessages = messages;
            StateHasChanged();
            });

        await hubConnection.StartAsync();
    }

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}
