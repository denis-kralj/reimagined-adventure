@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IJSRuntime jSRuntime

<div class="message @(IsCurrentUserOwner ? "mine" : "theirs")" id="@(IsLast ? ElementId : "")">
    <div class="message-metadata">
        <span class="message-metadata-handle">
            <strong style="color:@(Message.User.Color)">
                @HandleContent
            </strong>
        </span>
        <span class="message-metadata-timestamp">
            <TimestampComponent Data="@(Message.Posted)" />
        </span>
    </div>
    <div class="message-content">
        <span>@(Message.Message)</span>
    </div>
</div>

@code {
    [Parameter]
    public ChatMessage Message { get; set; }

    [Parameter]
    public bool IsLast { get; set; }

    private User currentUser;

    private string ElementId => $"{this.GetHashCode()}";

    private bool IsCurrentUserOwner => currentUser?.Id == Message.User.Id;

    private string HandleContent => IsCurrentUserOwner ? $"You ({Message.User.Handle})" : Message.User.Handle;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (IsLast && firstRender)
        {
            await ScrollToBottom();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    protected override async Task OnInitializedAsync()
    {
        currentUser = await localStorage.GetItemAsync<User>(LocalStorageKeys.UserData);
    }

    private async Task ScrollToBottom()
    {
        await jSRuntime.InvokeVoidAsync("ScrollToViewByElementId", ElementId).ConfigureAwait(false);
    }
}